max_jobs: 5
build:
  parallel: true
  verbosity: minimal
skip_branch_with_pr: true

environment:
  global:
    PYTHONUNBUFFERED: 1
    SYSTEM_LIBSSH: 1
    PYPI_USER:
      secure: WKF8ok0UPIgkA+isDUuHww==
    PYPI_PASS:
      secure: uXkrTaPGSNQdXTJIt3aiy2E1GBnbn6gH3opi7DgMIcmpLgZt7RTeqsaszbjPToGkoqfVXN+jdkQca4LfGAKZ8a2LgrrVYoITdxbjNkZB3yDBKk6ULNMsqdHmt4I1evRhSPSSZnRKU2rSzL+gOTViEVnhcahsUJPgNAIFvpZWsZfdRAafFtF1D33B03aAPwuhYuZTIwRyhUrwVGsYzOzIoDLtnpGj/0+GHazwjhHXfg/yTd600SPiWVsgknxjoeBu+cmi2iMDeT3ULu3P8UGjuQ==
    # Default python version to run single commands with
    PYTHON_DEF: "C:\\Python36-x64"
    PYTHON_VERSION: "3.6"
    # Python versions to build wheels for
    PYTHONVERS: C:\Python36-x64 C:\Python37-x64 C:\Python38-x64
    PYTHON_ARCH: "64"
    MSVC: "Visual Studio 14 Win64"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - set OPENSSL_DIR="C:\OpenSSL-v11-Win%PYTHON_ARCH%"
  - set VCLIBDIR=%WINDIR%\System32
  - cp %VCLIBDIR%/vcruntime*.dll ssh/
  - cp %VCLIBDIR%/msvcp*.dll ssh/
  - cp %VCLIBDIR%/msvcr*.dll ssh/
  - cp %OPENSSL_DIR%/bin/*.dll ssh/

  - for %%I in (%PYTHONVERS%) do %%I\python.exe -V
  - for %%I in (%PYTHONVERS%) do %%I\Scripts\pip install -U wheel setuptools twine cython

  # .c files need to be generated on Windows to handle platform
  # specific code.
  # Fix version used by versioneer to current git tag so the generated .c files
  # do not cause a version change.
  - "%PYTHON_DEF%\\python.exe ci/appveyor/fix_version.py ."
  - mv -f .git .git.bak
  - 7z x ci\appveyor\zlib1211.zip
  # - appveyor DownloadFile http://web.mit.edu/kerberos/dist/kfw/4.1/kfw-4.1-amd64.msi
  # - msiexec /i kfw-4.1-amd64.msi /passive /qn
  # - ps: ls "C:\Program Files\MIT\Kerberos\"
  # - cp "C:\Program Files\MIT\Kerberos\*.dll" ssh/
  - ps: ls ssh
  - ps: ls

build_script:
  - ci\\appveyor\\build_zlib.bat
  - for %%I in (%PYTHONVERS%) do cp C:/zlib/lib/zlibstatic.lib %%I/libs/
  - for %%I in (%PYTHONVERS%) do ls %%I/libs/
  - ci\\appveyor\\build_ssh.bat
  - ps: ls src/src/Release
  - cp src/src/Release/ssh.dll ssh/
  - for %%I in (%PYTHONVERS%) do cp src/src/Release/ssh.lib %%I/libs/
  # Clean C files before build
  - rm -f ssh/*.c
  - for %%I in (%PYTHONVERS%) do %%I\python.exe -V
  - for %%I in (%PYTHONVERS%) do %%I\python.exe setup.py build_ext
  - for %%I in (%PYTHONVERS%) do %%I\python.exe setup.py build
  - for %%I in (%PYTHONVERS%) do %%I\python.exe setup.py install
  - ps: ls ssh

test_script:
  - cd dist
  - for %%I in (%PYTHONVERS%) do %%I\python.exe ..\\ci\\appveyor\\import_test.py
  - cd ..

after_test:
  - for %%I in (%PYTHONVERS%) do %%I\python.exe setup.py bdist_wheel
  - mv dist/* .

artifacts:
  - path: "*.whl"

deploy_script:
  # Calling twine requires we set path
  - "SET PATH=%PYTHON_DEF%;%PYTHON_DEF%\\Scripts;%PATH%"
  - python ci/appveyor/pypi_upload.py *.whl
