environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    # CMD_IN_ENV: "cmd /E:ON /V:ON /C %APPVEYOR_BUILD_FOLDER%\\ci\\appveyor\\run_with_env.cmd"
    PYTHONUNBUFFERED: 1
    OPENSSL_VER: 1.1.0h
    SYSTEM_LIBSSH: 1
    PYPI_USER:
      secure: 2m0jy6JD/R9RExIosOT6YA==
    PYPI_PASS:
      secure: x+dF0A8BZUf2IrPNRN1O0w==
  matrix:
    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"
      MSVC: "Visual Studio 14 Win64"
      ARCH: x64_86

    - PYTHON: "C:\\Python37-x64"
      PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "64"
      MSVC: "Visual Studio 14 Win64"
      ARCH: x64_86

    - PYTHON: "C:\\Python38-x64"
      PYTHON_VERSION: "3.8"
      PYTHON_ARCH: "64"
      MSVC: "Visual Studio 14 Win64"
      ARCH: x64_86

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  # - "pip install --disable-pip-version-check --user --upgrade pip"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% pip install -r requirements_dev.txt"
  - "%CMD_IN_ENV% pip install -U wheel setuptools twine"

  # .c files need to be generated on Windows to handle platform
  # specific code.
  # Fix version used by versioneer to current git tag so the generated .c files
  # do not cause a version change.
  - python ci/appveyor/fix_version.py .
  - mv -f .git .git.bak
  - IF NOT "%PYTHON_VERSION%" == "2.7" (
      7z x ci\appveyor\zlib1211.zip
      appveyor DownloadFile https://indy.fulgan.com/SSL/Archive/Experimental/openssl-%OPENSSL_VER%-x%PYTHON_ARCH%-VC2017.zip
      appveyor DownloadFile https://web.mit.edu/kerberos/dist/kfw/4.1/kfw-4.1-src.zip
      7z x ci\appveyor\kfw-4.1-src.zip
      7z x openssl-%OPENSSL_VER%-x%PYTHON_ARCH%-VC2017.zip
      cp openssl-%OPENSSL_VER%-x%PYTHON_ARCH%-VC2017\libssl-1_1-x%PYTHON_ARCH%.dll ssh\ || cp openssl-%OPENSSL_VER%-x%PYTHON_ARCH%-VC2017\libssl-1_1.dll ssh\
      cp openssl-%OPENSSL_VER%-x%PYTHON_ARCH%-VC2017\libcrypto-1_1-x%PYTHON_ARCH%.dll ssh\ || cp openssl-%OPENSSL_VER%-x%PYTHON_ARCH%-VC2017\libcrypto-1_1.dll ssh\
    )
  - ps: ls ssh
  - ps: ls

build_script:
  - "%CMD_IN_ENV% ci\\appveyor\\build_krb.bat"
  - "%CMD_IN_ENV% ci\\appveyor\\build_zlib.bat"
  - "%CMD_IN_ENV% ci\\appveyor\\build_ssh.bat"
  - rm -f ssh/*.c
  - "%CMD_IN_ENV% python setup.py build_ext -I ci/appveyor/include"
  - "%CMD_IN_ENV% python setup.py build"
  - "%CMD_IN_ENV% python setup.py install"

test_script:
  - cd dist
  - python ..\\ci\\appveyor\\import_test.py
  - cd ..

after_test:
  # If tests are successful, create binary packages for the project.
  - "%CMD_IN_ENV% python setup.py bdist_wheel"
  - mv dist/* .

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: "*.whl"

deploy_script:
  - python ci/appveyor/pypi_upload.py *.whl
